[_ready]

description = "Called when the node is \"ready\", i.e. when both the node and its children have entered the scene tree. If the node has children, their _ready() callbacks get triggered first, and the parent node will receive the ready notification afterwards.

Corresponds to the NOTIFICATION_READY notification in Object._notification(). See also the onready keyword for variables.

Usually used for initialization. For even earlier initialization, Object._init() may be used. See also _enter_tree().

Note: _ready() may be called only once for each node. After removing a node from the scene tree and adding again, _ready will not be called for the second time. This can be bypassed with requesting another call with request_ready(), which may be called anywhere before adding the node again."
body = "func _ready()"
type_hint = " -> void:\n\t@pass"
no_type_hint = ":\n\t@pass"
additional_info = ""

[_enter_tree]

description = "Called when the node enters the SceneTree (e.g. upon instancing, scene changing, or after calling add_child() in a script). If the node has children, its _enter_tree() callback will be called first, and then that of the children.

Corresponds to the NOTIFICATION_ENTER_TREE notification in Object._notification()."
body = "func _enter_tree()"
type_hint = " -> void:\n\t@pass"
no_type_hint = ":\n\t@pass"
additional_info = ""

[_exit_tree]

description = "Called when the node is about to leave the SceneTree (e.g. upon freeing, scene changing, or after calling remove_child() in a script). If the node has children, its _exit_tree() callback will be called last, after all its children have left the tree.

Corresponds to the NOTIFICATION_EXIT_TREE notification in Object._notification() and signal tree_exiting. To get notified when the node has already left the active tree, connect to the tree_exited."

body = "func _exit_tree()"
type_hint = " -> void:\n\t@pass"
no_type_hint = ":\n\t@pass"
additional_info = ""

[_physics_process]

description = "Called during the physics processing step of the main loop. Physics processing means that the frame rate is synced to the physics, i.e. the delta variable should be constant.

It is only called if physics processing is enabled, which is done automatically if this method is overridden, and can be toggled with set_physics_process().

Corresponds to the NOTIFICATION_PHYSICS_PROCESS notification in Object._notification()."

body = "func _physics_process(delta"
type_hint = " : float) -> void:\n\t@pass"
no_type_hint = "):\n\t@pass"
additional_info = " (delta : float)"

[_process]

description = "Called during the processing step of the main loop. Processing happens at every frame and as fast as possible, so the delta time since the previous frame is not constant.

It is only called if processing is enabled, which is done automatically if this method is overridden, and can be toggled with set_process().

Corresponds to the NOTIFICATION_PROCESS notification in Object._notification()."

body = "func _process(delta"
type_hint = " : float) -> void:\n\t@pass"
no_type_hint = "):\n\t@pass"
additional_info = " (delta : float)"

[_input]

description = "Called when there is an input event. The input event propagates up through the node tree until a node consumes it.

It is only called if input processing is enabled, which is done automatically if this method is overridden, and can be toggled with set_process_input().

To consume the input event and stop it propagating further to other nodes, SceneTree.set_input_as_handled() can be called.

For gameplay input, _unhandled_input() and _unhandled_key_input() are usually a better fit as they allow the GUI to intercept the events first."

body = "func _input(event"
type_hint = " : InputEvent) -> void:\n\t@pass"
no_type_hint = "):\n\t@pass"
additional_info = " (event : InputEvent)"

[_unhandled_input]

description = "Called when an InputEvent hasn't been consumed by _input() or any GUI. The input event propagates up through the node tree until a node consumes it.

It is only called if unhandled input processing is enabled, which is done automatically if this method is overridden, and can be toggled with set_process_unhandled_input().

To consume the input event and stop it propagating further to other nodes, SceneTree.set_input_as_handled() can be called.

For gameplay input, this and _unhandled_key_input() are usually a better fit than _input() as they allow the GUI to intercept the events first."

body = "func _unhandled_input(event"
type_hint = " : InputEvent) -> void:\n\t@pass"
no_type_hint = "):\n\t@pass"
additional_info = " (event : InputEvent)"

[_unhandled_key_input]

description = "Called when an InputEventKey hasn't been consumed by _input() or any GUI. The input event propagates up through the node tree until a node consumes it.

It is only called if unhandled key input processing is enabled, which is done automatically if this method is overridden, and can be toggled with set_process_unhandled_key_input().

To consume the input event and stop it propagating further to other nodes, SceneTree.set_input_as_handled() can be called.

For gameplay input, this and _unhandled_input() are usually a better fit than _input() as they allow the GUI to intercept the events first."

body = "func _unhandled_key_input(event"
type_hint = " : InputEventKey) -> void:\n\t@pass"
no_type_hint = "):\n\t@pass"
additional_info = " (event : InputEventKey)"

[_gui_input]

description = "Virtual method to be implemented by the user. Use this method to process and accept inputs on UI elements. See accept_event().

Example: clicking a control.

func _gui_input(event):
    if event is InputEventMouseButton:
        if event.button_index == BUTTON_LEFT and event.pressed:
            print(\"I've been clicked D:\")

The event won't trigger if:

* clicking outside the control (see has_point());

* control has mouse_filter set to MOUSE_FILTER_IGNORE;

* control is obstructed by another Control on top of it, which doesn't have mouse_filter set to MOUSE_FILTER_IGNORE;

* control's parent has mouse_filter set to MOUSE_FILTER_STOP or has accepted the event;

* it happens outside parent's rectangle and the parent has either rect_clip_content or _clips_input() enabled."

body = "func _gui_input(event"
type_hint = " : InputEvent) -> void:\n\t@pass"
no_type_hint = "):\n\t@pass"
additional_info = " (event : InputEvent)"

[_draw]

description = "Overridable function called by the engine (if defined) to draw the canvas item."

body = "func _draw()"
type_hint = " -> void:\n\t@pass"
no_type_hint = ":\n\t@pass"
additional_info = ""

